<% layout("../layouts/main") %>

<div class="max-w-6xl mx-auto">
  <!-- Título y botón para crear -->
  <div class="flex justify-between items-center mb-6">
    <div>
      <h2 class="text-3xl font-bold text-gray-800 mb-2">Gestión de Áreas</h2>
      <p class="text-gray-600">Administra las áreas y servicios del hospital</p>
    </div>
    <button
      onclick="abrirModalCrear()"
      class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg flex items-center transition"
    >
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
      </svg>
      Nueva Área
    </button>
  </div>

  <!-- Tabla de áreas -->
  <div class="bg-white rounded-lg shadow-md overflow-hidden">
    <div class="p-6">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200" id="tablaAreas">
          <thead class="bg-gray-100">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">ID</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Ubicación</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Centro de Costo</th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="cuerpoTablaAreas">
            <!-- Se llena dinámicamente con JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Crear/Editar Área -->
<div id="modalArea" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
    <div class="p-6">
      <h3 id="tituloModal" class="text-2xl font-bold text-gray-800 mb-4">Nueva Área</h3>

      <form id="formArea" onsubmit="return false;">
        <input type="hidden" id="idArea" />

        <div class="mb-4">
          <label for="nombre" class="block text-sm font-medium text-gray-700 mb-2">
            Nombre <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="nombre"
            name="nombre"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Ej: Emergencia"
          />
        </div>

        <div class="mb-4">
          <label for="ubicacion" class="block text-sm font-medium text-gray-700 mb-2">
            Ubicación
          </label>
          <input
            type="text"
            id="ubicacion"
            name="ubicacion"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Ej: Piso 2, Ala Norte"
          />
        </div>

        <div class="mb-6">
          <label for="centroCosto" class="block text-sm font-medium text-gray-700 mb-2">
            Centro de Costo
          </label>
          <input
            type="text"
            id="centroCosto"
            name="centroCosto"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Ej: CC-001"
          />
        </div>

        <div class="flex justify-end space-x-3">
          <button
            type="button"
            onclick="cerrarModal()"
            class="px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg font-semibold transition"
          >
            Cancelar
          </button>
          <button
            type="submit"
            id="btnGuardar"
            class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-semibold transition"
          >
            Guardar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Estado de la aplicación
  let areas = [];
  let modoEdicion = false;

  // Cargar áreas al iniciar
  document.addEventListener('DOMContentLoaded', () => {
    cargarAreas();
  });

  // Cargar todas las áreas
  async function cargarAreas() {
    try {
      const response = await fetch('/api/areas');
      const data = await response.json();

      if (data.exito) {
        areas = data.datos;
        renderizarTabla();
      } else {
        mostrarError('Error al cargar las áreas');
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarError('Error de conexión al cargar las áreas');
    }
  }

  // Renderizar tabla
  function renderizarTabla() {
    const tbody = document.getElementById('cuerpoTablaAreas');

    if (areas.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-8 text-center text-gray-500">
            No hay áreas registradas. Haz clic en "Nueva Área" para crear una.
          </td>
        </tr>
      `;
      return;
    }

    tbody.innerHTML = areas.map(area => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${area.IdArea}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${area.Nombre}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${area.Ubicacion || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${area.CentroCosto || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
          <button
            onclick="editarArea(${area.IdArea})"
            class="text-blue-600 hover:text-blue-900 mr-3"
            title="Editar"
          >
            <svg class="w-5 h-5 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </button>
          <button
            onclick="eliminarArea(${area.IdArea}, '${area.Nombre}')"
            class="text-red-600 hover:text-red-900"
            title="Eliminar"
          >
            <svg class="w-5 h-5 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </td>
      </tr>
    `).join('');
  }

  // Abrir modal para crear
  function abrirModalCrear() {
    modoEdicion = false;
    document.getElementById('tituloModal').textContent = 'Nueva Área';
    document.getElementById('formArea').reset();
    document.getElementById('idArea').value = '';
    document.getElementById('modalArea').classList.remove('hidden');
    document.getElementById('modalArea').classList.add('flex');
  }

  // Editar área
  function editarArea(id) {
    const area = areas.find(a => a.IdArea === id);
    if (!area) return;

    modoEdicion = true;
    document.getElementById('tituloModal').textContent = 'Editar Área';
    document.getElementById('idArea').value = area.IdArea;
    document.getElementById('nombre').value = area.Nombre;
    document.getElementById('ubicacion').value = area.Ubicacion || '';
    document.getElementById('centroCosto').value = area.CentroCosto || '';

    document.getElementById('modalArea').classList.remove('hidden');
    document.getElementById('modalArea').classList.add('flex');
  }

  // Cerrar modal
  function cerrarModal() {
    document.getElementById('modalArea').classList.add('hidden');
    document.getElementById('modalArea').classList.remove('flex');
    document.getElementById('formArea').reset();
  }

  // Guardar área (crear o actualizar)
  document.getElementById('formArea').addEventListener('submit', async (e) => {
    e.preventDefault();

    const nombre = document.getElementById('nombre').value.trim();
    const ubicacion = document.getElementById('ubicacion').value.trim();
    const centroCosto = document.getElementById('centroCosto').value.trim();
    const idArea = document.getElementById('idArea').value;

    const datos = {
      Nombre: nombre,
      Ubicacion: ubicacion || null,
      CentroCosto: centroCosto || null
    };

    try {
      const url = modoEdicion ? `/api/areas/${idArea}` : '/api/areas';
      const method = modoEdicion ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(datos)
      });

      const result = await response.json();

      if (result.exito) {
        mostrarExito(result.mensaje);
        cerrarModal();
        await cargarAreas();
      } else {
        mostrarError(result.mensaje);
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarError('Error al guardar el área');
    }
  });

  // Eliminar área
  async function eliminarArea(id, nombre) {
    if (!confirm(`¿Estás seguro de eliminar el área "${nombre}"?`)) {
      return;
    }

    try {
      const response = await fetch(`/api/areas/${id}`, {
        method: 'DELETE'
      });

      const result = await response.json();

      if (result.exito) {
        mostrarExito(result.mensaje);
        await cargarAreas();
      } else {
        mostrarError(result.mensaje);
      }
    } catch (error) {
      console.error('Error:', error);
      mostrarError('Error al eliminar el área');
    }
  }

  // Notificaciones
  function mostrarExito(mensaje) {
    alert(mensaje); // Por ahora usamos alert, se puede mejorar con un toast
  }

  function mostrarError(mensaje) {
    alert('Error: ' + mensaje);
  }
</script>
